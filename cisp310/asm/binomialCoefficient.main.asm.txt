; general comments
;
; Computes:
;     n! / (k!(n-k)!)
;     where 0 <= k < n
;
; Register Dictionary:
;   AX holds
;       temporary values for extending to WORDs
;       the current product of the factorial calculations
;       the numerator for division (n!/k!) (extended using cwd)
;   BX holds
;       the current factor in computing factorials
;       the denominator for division ((n - k)!)
;   CX holds
;       the minimum factor to include in factorial calculations
;       temporary values for setting my resultIsValid flag

; preprocessor directives
.586
.MODEL FLAT

; external files to link with

; stack configuration
.STACK 4096

; named memory allocation and initialization
.DATA
n_            BYTE 5d
k_            BYTE 3d
numerator     WORD 0d
denominator   WORD 0d
nChooseK      WORD 0d
resultIsValid BYTE 0d ; a flag showing whether or not the result is valid

; names of procedures defined in other *.asm files in the project

; procedure code
.CODE
main	PROC

    calcNFactOverKFact:
        ; current product is in AX,
        ; current factor is in BX
        ; minimum factor is in CX (k + 1)
        mov AL, n_
        cbw
        mov BX, AX ; these 3 instructions extend n_ to a WORD in BX

        mov AL, k_
        cbw
        mov CX, AX
        inc CX ; CX now contains k + 1

        mov AX, 1d
        checkNFactOverKFactLoop: ; WHILE BX >= CX (WHILE current factor >= k + 1)
            cmp BX, CX
            jae multiplyNextFactor
            jmp doneWithNFactOverKFact
        multiplyNextFactor:
            mul BX ; multiply AX by the current factor
            jc overflowOccurred
            ; jumps if the product is greater than AX can hold
            ; label is near the bottom of this file
            dec BX ; advance BH to the next factor
            jmp checkNFactOverKFactLoop
        ; END WHILE

    doneWithNFactOverKFact:
        mov numerator, AX
        jmp calcNMinusKFact
    ; done with computing n!/k!

    calcNMinusKFact:
        ; current product is in AX,
        ; current factor is in BX,
        ; minimum factor is in CX (1)
        mov AL, n_
        sub AL, k_
        cbw
        mov BX, AX ; BX now contains (n - k)
        mov CX, 1d

        mov AX, 1d
        checkNMinusKFactLoop: ; WHILE BX >= CX
            cmp BX, CX
            jae multiplyNextFactorMinus
            jmp doneWithNMinusKFact
        multiplyNextFactorMinus:
            mul BX
            jc overflowOccurred
            dec BX
            jmp checkNMinusKFactLoop
        ; END WHILE

    doneWithNMinusKFact:
        mov denominator, AX
        jmp divideSection

    divideSection:
        mov AX, numerator
        mov BX, denominator
        cwd
        div BX ; ensures the result will be WORD sized
        mov nChooseK, AX

        mov CL, 1d
        mov resultIsValid, CL ; report that the result is valid

        jmp endProgram

    overflowOccurred:
        ; cannot compute
        mov CL, 0d
        mov resultIsValid, CL ; report that the result is not valid
        jmp endProgram

    endProgram:
        ; done

	mov EAX, 0
	ret
main	ENDP

END
