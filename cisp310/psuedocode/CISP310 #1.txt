// first, initialize all variables at the top
CREATE input to hold INTEGER
CREATE output to hold STRING
CREATE maxInput to hold INTEGER
CREATE maxDigitValue to hold INTEGER // maximum value of any single binary digit
CREATE power to hold INTEGER
// Essentially, 2^power = maxDigitValue
CREATE quotient to hold INTEGER
CREATE remainder to hold INTEGER
CREATE subtractMe to hold INTEGER

// next, compute the maximum value the user can enter.
COPY 0 into maxInput
COPY 0 into power
COPY 1 into maxDigitValue
WHILE(power is less than 16)
    ADD maxDigitValue to maxInput
    ADD 1 to power
    MULTIPLY maxDigitValue by 2
END WHILE // maxInput is now sum of 2^n for n from 0 to 15
DIVIDE maxDigitValue by 2 // is now 2^15 instead of 2^16

SHOW "enter a decimal number between 0 and ", maxInput, ": " on screen
GET input number from keyboard
COPY the value into input
// perform input validation
IF(input IS MORE THAN OR THE SAME AS 0 and input IS LESS THAN OR THE SAME AS maxInput) THEN
    COPY input into remainder
    COPY "" into output
    WHILE(maxDigitValue IS MORE THAN 0)
        COPY remainder into quotient
        DIVIDE quotient by maxDigitValue // quotient /= maxDigitValue
        IF(quotient IS SAME AS 0) THEN
            APPEND "0" to output
        ELSE
            APPEND "1" to output
        END IF
        COPY quotient into subtractMe
        MULTIPLY subtractMe by maxDigitValue // subtractMe is now (remainder / maxDigitValue) * maxDigitValue
        SUBTRACT subtractMe from remainder // remove all whole maxDigitValues from the remainder
        DIVIDE maxDigitValue by 2 // decrease power by 1 as we move one bit to the right
    END WHILE

    SHOW input, " in base 10 is ", output, " in base 2"
ELSE
    SHOW input, " is not in the allowed range"
END IF
